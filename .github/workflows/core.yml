name: "Core: build and publish"

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: "Version (optional). Can be either x.y.z or canary"
        required: false
      skip-docker:
        type: boolean
        description: "Skip Docker build (optional)"
        required: false
        default: false
      debug:
        type: boolean
        description: "Debug mode (optional)"
        required: false
        default: false

env:
  # not entirely necessary, so far, but it's good to control where pnpm stores its cache
  # for future use
  # edit - PNPM is not reading this option
  PNPM_HOME: /pnpm

jobs:
  build:
    name: "Build project. Publish to NPM if needed"
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"
          scope: "@syncmaven" # Replace with your npm scope if needed
          always-auth: true

      - name: Install pnpm
        run: npm install -g pnpm@8

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Display versions of tools
        run: |
          echo "Node version: $(node --version), npm version: $(npm --version), pnpm version: $(pnpm --version)"

      - name: Get pnpm store
        id: pnpm-store
        run: |
          echo "Using PNPM store at $(pnpm store path)"
          echo "dir=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-store.outputs.dir }}
          key: "${{ runner.os }}-pnpm-${{ hashFiles('./pnpm-lock.yaml') }}"
          restore-keys: |
            ${{ runner.os }}-pnpm-


      - name: Install dependencies
        run: pnpm install

      - name: List PNPM store status
        if: ${{ github.event.inputs.debug == true }}
        run: ls -la ${{ steps.pnpm-store.outputs.dir }}

      - name: Check code style
        run: pnpm format:check:all

      - name: Build PNPM project
        run: pnpm build

      - name: Test PNPM project
        run: pnpm test

      - name: Set up Git user for publishing
        run: |
          git config --global user.name 'Syncmaven Builds'
          git config --global user.email 'dev@syncmaven.sh'
      - name: Prepare NPM authentication
        # we can't keep it in the npmrc file. If NPM_TOKEN is not set, pnpm complains
        run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish canary version to NPM
        if: (github.ref == 'refs/heads/main' && github.event.inputs.release-version == '') || github.event.inputs.release-version == 'canary'
        run: pnpm release:canary

      - name: Publish release version to NPM
        if: github.event.inputs.release-version != '' && github.event.inputs.release-version != 'canary'
        run: pnpm release:stable --version ${{ github.event.inputs.release-version }} --publish

  build-docker:
    name: "Docker Build"
    # Don't automatically build on PRs and non-main branches
    if: ((github.ref == 'refs/heads/main' && github.event.inputs.release-version == '') || github.event.inputs.release-version != '') && github.event.inputs.skip-docker != true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # need this for build id below
          fetch-depth: 0

      - name: Set build ID
        id: versions
        run: |
          echo "build_id=$(git rev-list --count HEAD).$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "vklmn/vklmn"
      - name: Set Publishing Tags
        id: docker_tag
        run: |
          # Either canary version is set explicitely, or it's not set at all meaning it's automated build
          BUILD_ID="$(git rev-list --count HEAD).$(git rev-parse --short HEAD)"
          echo build_id=$BUILD_ID >> "$GITHUB_OUTPUT"
          if [ "${{ github.event.inputs.release-version == 'canary' || github.event.inputs.release-version == '' }}" == "true" ]; then
            echo "tag=canary-$BUILD_ID" >> "$GITHUB_OUTPUT"
            echo "secondary_tag=canary" >> "$GITHUB_OUTPUT"
          else
            echo tag=${{ github.event.inputs.release-version }} >> "$GITHUB_OUTPUT"
            echo secondary_tag=latest >> "$GITHUB_OUTPUT"
          fi
      - name: Build and Push Docker Images
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          context: .
          tags: |
            syncmaven/syncmaven:${{ steps.docker_tag.outputs.secondary_tag }}
            syncmaven/syncmaven:${{ steps.docker_tag.outputs.tag }}
          outputs: type=registry,push=true
      - name: "Update Docker Hub description"
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: syncmaven/syncmaven
          short-description: "Syncmaven core"
          readme-filepath: README.dockerhub-core.md
