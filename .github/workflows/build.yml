name: Build and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release-version:
        description: "Release Version (optional)"
        required: false

jobs:
  build:
    name: "Build project and publish NPMs"
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"
          scope: "@syncmaven" # Replace with your npm scope if needed
          always-auth: true

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build PNPM project
        run: pnpm build && pnpm test

      - name: Test PNPM project
        run: pnpm test

      - name: Set up Git user for publishing
        run: |
          git config --global user.name 'Syncmaven Builds'
          git config --global user.email 'dev@syncmaven.sh'

      - name: Publish canary version to NPM
        if: github.ref == 'refs/heads/main' && github.event.inputs.release-version == ''
        run: pnpm release:canary
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish release version to NPM
        if: github.event.inputs.release-version != ''
        run: pnpm release --version ${{ github.event.inputs.release-version }} --publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-docker:
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.versions.outputs.build_id }}
    # We don't need use build results, since docker rebuilds the project anyway
    strategy:
      matrix:
        arch: [arm64, amd64]

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ~/.docker
          key: ${{ runner.os }}-docker-${{ matrix.arch }}
          restore-keys: |
            ${{ runner.os }}-docker

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: checkout
        name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: versions
        run: |
          echo "build_id=$(git rev-list --count HEAD).$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"



      - name: Build and push release docker images
        if: github.event.inputs.release-version != ''
        run: docker buildx build --platform linux/${{ matrix.arch }} --tag syncmaven/syncmaven:v${{ github.event.inputs.release-version }}-${{ matrix.arch }} --tag syncmaven/syncmaven:latest-${{ matrix.arch }} --push .

      - name: Build and push canary docker images
        if: github.ref == 'refs/heads/main' && github.event.inputs.release-version == ''
        run: docker buildx build --platform linux/${{ matrix.arch }} --tag syncmaven/syncmaven:canary-v${{ steps.versions.outputs.build_id }}-${{ matrix.arch }} --tag syncmaven/syncmaven:canary-${{ matrix.arch }} --push .


  manifest:
    runs-on: ubuntu-latest
    needs: build-docker
    name: "Create and push manifest list"
    steps:
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: checkout
        name: Check out repository
        uses: actions/checkout@v4

      - name: Create and push manifest list for canary
        if: github.ref == 'refs/heads/main' && github.event.inputs.release-version == ''
        run: ./build-scripts/docker-publish-tags.sh canary canary-v${{ needs.build-docker.outputs.build_id }}

